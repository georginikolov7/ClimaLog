
function createBook(currentDate){
  currentDate=new Date();
  Logger.log("Creating new book...");
  let year=currentDate.getFullYear();
  let name='ClimaLog_Data_'+ year;
  let book=SpreadsheetApp.create(name);

  //Set the id to the new book:

   Logger.log(`Created book with id: ${book.getId()}`);

  //Clear the default sheet:
 // book.deleteActiveSheet();
let monthAsString =currentDate.toLocaleString("en-US", { month: 'long' });

//Create the new sheet:
createNewSheet(book,monthAsString);
  return book;
}

function test(){

let date=new Date();
let book;
let bookName='ClimaLog_Data_'+date.getFullYear();
let bookFiles=DriveApp.getFilesByName(bookName);
book=SpreadsheetApp.open(DriveApp.getFilesByName(bookName).next());
let monthAsString=date.toLocaleString("en-US", { month: 'long' });
  createNewSheet(book,monthAsString);
}
function createNewSheet(book,monthAsString){
  Logger.log('Creating new sheet...');
  Logger.log('Getting formatted sheet...');
  let formatsBookID='1URJXqPr05jgT2bZK01Q_omuLTnTlYEIVISjcdUguIq8';
  let formatsSheet=SpreadsheetApp.openById(formatsBookID).getActiveSheet();
  let sheetName=formatsSheet.getName();
  formatsSheet.copyTo(book);
  let newSheet=book.getSheetByName('Copy of '+sheetName);
  newSheet.setName(monthAsString);
  Logger.log('Created new sheet for: ' + monthAsString);
  return newSheet;
}

function doGet(e) { 
Logger.log( JSON.stringify(e) );
let result = 'Ok';
if (e.parameter == 'undefined') {
result = 'No Parameters';
}
else {
let currentDate = new Date();


//Open book:
let book;
let bookName='ClimaLog_Data_'+currentDate.getFullYear();
let bookFiles=DriveApp.getFilesByName(bookName);
if(!bookFiles.hasNext()){
  //The book doesn't exist => create it:
  book=createBook(currentDate);
}else{
book=SpreadsheetApp.open(DriveApp.getFilesByName(bookName).next());
}

//open the last sheet:
let monthAsString = currentDate.toLocaleString("en-US", { month: 'long' });
let openSheet = book.getSheetByName(monthAsString);
if(!openSheet){

  //create a new sheet for the new month:
  openSheet=createNewSheet(monthAsString);
}

let newRow = openSheet.getLastRow() + 1;
let rowData = [];
rowData[0] = currentDate;
let parameter=e.parameter;  //get the array of params: temperatures, humidities, snowDepths

let index=0;  //table row array indexer
for(let param in parameter){
  let index=0;
  Logger.log('In for loop. Logging '+ param +" -> " +parameter[param]);
  if(param=='insideTemperature'){
    rowData[1]=parameter[param];
  }
  else if(param=='insideHumidity'){
    rowData[2]=parameter[param];
  }
  else if(param.includes('outsideTemperature')){
    index=param.split(',')[0];
    rowData[3+(index-1)*4]=parameter[param];  //first temperature is at 3th column
  }
  else if(param.includes('outsideHumidity')){
    index=param.split(",")[0];
    rowData[4+(index-1)*4]=parameter[param];  //first temperature is at 4th column
  }
else if(param.includes('snowDepth')){
index=param.split(',')[0];
    rowData[5+(index-1)*4]=parameter[param];  //first temperature is at 4th column
}
else if(param.includes('batLevel')){
index=param.split(',')[0];
    rowData[6+(index-1)*4]=parameter[param];  //first temperature is at 4th column
}
else{
  Logger.log('Invalid parameter: '+param+'!');
}
}

//Set values to empty cells: (so that json parser in Xamarin doesn't break)

Logger.log(JSON.stringify(rowData));
for(let val in rowData){
  if(val==undefined){
    val='noVal';
  }
}
let newRange = openSheet.getRange(newRow, 1, 1, rowData.length);
newRange.setValues([rowData]);

}
return ContentService.createTextOutput(result);
}


